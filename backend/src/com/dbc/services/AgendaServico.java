package com.dbc.services;

import com.dbc.exceptions.BancoDeDadosException;
import com.dbc.model.entities.Agenda;
import com.dbc.model.enums.StatusAgendaEnum;
import com.dbc.repository.AgendaRepository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class AgendaServico {
    private AgendaRepository agendaRepository;
    public AgendaServico () {
        agendaRepository  = new AgendaRepository();
    }
    public void cadastrarDisponibilidade(Agenda agenda) {
        try {
            List<Agenda> agendamentos = agendaRepository.listar();
            if (!validarHorarioAgendamento(agenda, agendamentos)) {
                return;
            }
            Agenda agendaCadastrada = agendaRepository.cadastrar(agenda);
            System.out.println("‚úÖ Hor√°rio cadastrado com sucesso!");
        } catch (BancoDeDadosException e) {
            System.err.println("üö´ ERRO: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void removerDisponibilidade(Long idAgenda) {
        try {
            boolean horarioRemovido = agendaRepository.remover(idAgenda);
            if (horarioRemovido) {
                System.out.println("‚úÖ Agendamento de id "+idAgenda+" removido com sucesso!");
            };
        } catch (Exception e) {
            System.err.println("üö´ N√£o foi poss√≠vel remover o agendamento!");
            e.printStackTrace();
        }
    }

    public void agendarHorario(Long idAgenda) {

    }

    public void reagendarHorario(Long idAgendaAtual) {

    }

    public Agenda listarUm(Long idAgenda) {
        return null;
    }

    public ArrayList<Agenda> listarTodos(StatusAgendaEnum statusAgendaEnum) {
        return null;
    }

    public ArrayList<Agenda> listarTodosPorCliente(Long idCliente) {
        return null;
    }

    public void cancelarHorario(Long idAgenda) {

    }

    public static boolean validarHorarioAgendamento(Agenda agenda, List<Agenda> agendamentos) {
        for (Agenda agendamento : agendamentos) {
            //data anterior
            if (agenda.getDataHoraInicio().isBefore(LocalDateTime.now()) || agenda.getDataHoraFim().isBefore(LocalDateTime.now())) {
                throw new IllegalArgumentException("N√£o √© poss√≠vel cadastrar um agendamento em um hor√°rio passado, favor verifique.");
            }
            //In√≠cio no meio de hor√°rio j√° marcado
            if (agenda.getDataHoraInicio().isBefore(agendamento.getDataHoraFim())
                    && agenda.getDataHoraInicio().isAfter(agendamento.getDataHoraInicio())) {
                throw new IllegalArgumentException("N√£o √© poss√≠vel cadastrar neste hor√°rio, est√° havendo 'intercess√£o de hor√°rios'.");
            }
            //Fim no meio de hor√°rio j√° marcado
            if (agenda.getDataHoraFim().isBefore(agendamento.getDataHoraFim())
                    && agenda.getDataHoraFim().isAfter(agendamento.getDataHoraInicio())) {
                throw new IllegalArgumentException("N√£o √© poss√≠vel cadastrar neste hor√°rio, est√° havendo 'intercess√£o de hor√°rios'.");
            }
            //In√≠cio == in√≠cio j√° marcado
            if (agenda.getDataHoraInicio() == agendamento.getDataHoraInicio() && agenda.getDataHoraFim() == agendamento.getDataHoraFim()) {
                throw new IllegalArgumentException("Este hor√°rio j√° est√° cadastrado em sua agenda, favor verificar.");
            }
            //Fim == fim j√° marcado
            if (agenda.getDataHoraInicio() == agendamento.getDataHoraInicio()) {
                throw new IllegalArgumentException("J√° h√° hor√°rio cadastrado com esta data/hora inicial, verifique sua agenda.");
            }
            //Hor√°rio j√° cadastrado
            if (agenda.getDataHoraFim() == agendamento.getDataHoraFim()) {
                throw new IllegalArgumentException("J√° h√° hor√°rio cadastrado com esta data/hora final, verifique sua agenda.");
            }
        }
        return true;
    }
}
